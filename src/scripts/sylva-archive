#!/usr/bin/env python3

import glob
import argparse
import uuid
import os
from datetime import datetime

from sylva import Configuration, Folder
from sylva.devices import BAA500
from sylva.devices.Poleno import Poleno
from sylva.repositories import DevicesRepository, ArchiveRepository

configuration = Configuration()
device_repository = DevicesRepository()

parser = argparse.ArgumentParser(description="""Walks trough the incoming directory and puts each file from "incomingDir" 
                                                to SYLVA "archiveDir". If there is a faulty or already existing file, it 
                                                will be moved to "trashDir".""")

parser.add_argument("--incomingDir", help="absolute path of directory where files can be found that need to be archived; default is '{0}'".format(configuration.get_folders()[Folder.INCOMING.value]), action="store", required=False, default=configuration.get_folders()[Folder.INCOMING.value])
parser.add_argument("--archiveDir", help="absolute path of directory where files should be archived; default is '{0}'".format(configuration.get_folders()[Folder.ARCHIVE.value]), action="store", required=False, default=configuration.get_folders()[Folder.ARCHIVE.value])
parser.add_argument("--trashDir", help="absolute path of directory where files should be put if they are trash; default is '{0}'".format(configuration.get_folders()[Folder.TRASH.value]), action="store", required=False, default=configuration.get_folders()[Folder.TRASH.value])

args = parser.parse_args()

archive_repository = ArchiveRepository(configuration, archive_base_path = args.archiveDir, trash_base_path=args.trashDir)

process_id = str(uuid.uuid4())
print("{0} - {1} - START - Process started.".format(datetime.now().isoformat(), process_id))

for filename in glob.iglob(args.incomingDir + '/**/*.zip', recursive=True):
     # it's a ZIP file; try to get meta information out of it by passing it to device-specific implementations
     meta = BAA500(filename, device_repository).get_data_file_meta_data() or Poleno(filename, device_repository).get_data_file_meta_data()

     if meta is not None:          
          if (archive_repository.has(meta) == False):
               result_file = archive_repository.archive(filename, meta)
               print("{0} - {1} - OK - File {2} archived to {3}.".format(datetime.now().isoformat(), process_id, filename, result_file))

               for hook in configuration.get_hooks(meta.get_device_type()):
                    print("{0} - {1} - INFO - Start of hook '{2}' for file {3}.".format(datetime.now().isoformat(), process_id, hook, filename, result_file))
                    os.system(hook)

          else:
               # file already archived -> move to trash
               result_file = archive_repository.trash(filename, process_id=process_id)
               print("{0} - {1} - WARN - File already exists in archive. Moved file {2} to trash at {3}.".format(datetime.now().isoformat(), process_id, filename, result_file))

     else:
          # invalid file or unknown device -> move to trash
          result_file = archive_repository.trash(filename, process_id=process_id)
          print("{0} - {1} - WARN - No device implementation found. Moved file {2} to trash at {3}.".format(datetime.now().isoformat(), process_id, filename, result_file))
     
print("{0} - {1} - END - Process ended.".format(datetime.now().isoformat(), process_id))